import PointND from '../logic/maths/nD/PointND';

const rootSystemsNDPoints = {
  // Only the positive roots of the specified root system
  A4: [
    [1140 / 721, -1 / 3970316, -2 / 3448195, 0],
    [570 / 721, 2718287 / 1985158, -2 / 3448195, 0],
    [-570 / 721, 5436575 / 3970316, 0, 0],
    [570 / 721, 1812191 / 3970316, 4451596 / 3448195, 0],
    [-570 / 721, 1032 / 2261, 4451598 / 3448195, 0],
    [0, -1603 / 1756, 4451598 / 3448195, 0],
    [570 / 721, 1812191 / 3970316, 1112898 / 3448195, 5 / 4],
    [-570 / 721, 1032 / 2261, 620 / 1921, 5 / 4],
    [0, -1603 / 1756, 620 / 1921, 5 / 4],
    [0, 0, -1738 / 1795, 5 / 4],
  ],
  B4: [
    [1, -1, 0, 0],
    [1, 1, 0, 0],
    [1, 0, -1, 0],
    [1, 0, 1, 0],
    [1, 0, 0, -1],
    [1, 0, 0, 1],
    [0, 1, -1, 0],
    [0, 1, 1, 0],
    [0, 1, 0, -1],
    [0, 1, 0, 1],
    [0, 0, 1, -1],
    [0, 0, 1, 1],
    [1, 0, 0, 0],
    [0, 1, 0, 0],
    [0, 0, 1, 0],
    [0, 0, 0, 1],
  ],
  C4: [
    [1, 1, 0, 0],
    [1, 0, 1, 0],
    [0, 1, 1, 0],
    [1, 0, 0, 1],
    [0, 1, 0, 1],
    [0, 0, 1, 1],
    [1, -1, 0, 0],
    [1, 0, -1, 0],
    [0, 1, -1, 0],
    [1, 0, 0, -1],
    [0, 1, 0, -1],
    [0, 0, 1, -1],
    [2, 0, 0, 0],
    [0, 2, 0, 0],
    [0, 0, 2, 0],
    [0, 0, 0, 2],
  ],
  D4: [
    [1, 1, 0, 0],
    [1, 0, 1, 0],
    [0, 1, 1, 0],
    [1, 0, 0, 1],
    [0, 1, 0, 1],
    [0, 0, 1, 1],
    [1, -1, 0, 0],
    [1, 0, -1, 0],
    [0, 1, -1, 0],
    [1, 0, 0, -1],
    [0, 1, 0, -1],
    [0, 0, 1, -1],
  ],
};
export const rootSystemsND = {
  A4: rootSystemsNDPoints.A4.map((p) => new PointND(p)),
  B4: rootSystemsNDPoints.B4.map((p) => new PointND(p)),
  C4: rootSystemsNDPoints.C4.map((p) => new PointND(p)),
  D4: rootSystemsNDPoints.D4.map((p) => new PointND(p)),
};
